
typedef struct Type{
	char *path;
	bool is_loaded;
}Type;

extern Type undefined_type;

void TypeFree(Type *type);
void TypeOpen(char *path);

Type *BundleTypeOpen(Bundle *bundle, char *path){
	Type *type = &undefined_type;
	if(bundle != NULL && path != NULL){
		// Resize the bundle's type buffer and make sure realloc succeeded
		Type *tmp_types = realloc(bundle->types, sizeof(Type) * (bundle->num_types + 1));
		if(tmp_types != NULL){
			bundle->types = tmp_types;

			bundle->types[bundle->num_types] = TypeOpen(path);
			if(bundle->types[bundle->num_types].is_loaded){
				// If the type_create function succeeds, increment the bundle's 'Type' counter and set the return ptr
				bundle->num_types++;
				type = &bundle->types[bundle->num_types];
			}else{
				// Otherwise, free the type and leave the return ptr pointing to 'undefined_type'
				TypeFree(&bundle->types[bundle->num_types]);
			}
		}
	}
	return type;
}

Type *BundleTypeFind(Bundle *bundle, char *path){
	Type *type = &undefined_type;
	if(bundle != NULL && path != NULL){
		for(int i = 0; i < bundle->num_types; i++){
			if(bundle->types[i].path != NULL && strcmp(bundle->types[i].path, path) == 0){
				type = &bundle->types[i];
				break;
			}
		}
		if(type != NULL && type == undefined_type){
			type = BundleTypeOpen(bundle, path);
		}
	}
	return type;
}